import os

from alembic import context
from logging.config import fileConfig
from sqlalchemy import create_engine, text
from sqlalchemy.schema import CreateSchema

from app.tables import FeedItem, Trajectory, metadata


# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
target_metadata = [metadata]

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

SCHEMATA = ["gps"]
url = os.getenv("DATABASE_URL")


def process_revision_directives(context, revision, directives):
    """Customize script autogeneration."""

    # Import geolalchemy in autogenerated scripts
    script = directives[0]
    script.imports.add("import geoalchemy2")

    if config.cmd_opts.autogenerate:
        script = directives[0]
        if script.upgrade_ops.is_empty():
            directives[:] = []
            print("No changes in schema detected.")


def include_object(obj, name, type_, reflected, compare_to):
    """
    Good bot generated a docstring:
        Custom function to include/exclude objects in Alembic autogenerate.

        :param obj: SQLAlchemy object being considered (table, column, etc.)
        :param name: Name of the object
        :param type_: Type of object ('table', 'column', etc.)
        :param reflected: True if the object is reflected from the database
        :param compare_to: The corresponding object to compare against
        :return: True if the object should be included in autogenerate, False to exclude
    """
    if type_ == "table" and name == "spatial_ref_sys":
        return False
    return True


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """

    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    engine = create_engine(url)

    with engine.connect() as connection:
        with connection.begin():
            for schema in SCHEMATA:
                if not engine.dialect.has_schema(connection, schema):
                    connection.execute(CreateSchema(schema))
            connection.execute(text("CREATE EXTENSION IF NOT EXISTS postgis;"))
            connection.execute(text("SELECT postgis_full_version();"))

        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            process_revision_directives=process_revision_directives,  # Make sure geoalchemy import included with any autogen script
            include_object=include_object,
            dialect_opts={"paramstyle": "named"},
            include_schemas=True,
            include_name=include_name,
            transactional_ddl=False,
        )

        with context.begin_transaction():
            context.run_migrations()


def include_name(name, type_, parent_names):
    if type_ == "schema":
        return name in SCHEMATA
    else:
        return True


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
